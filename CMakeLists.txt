PROJECT(pcsr)

CMAKE_MINIMUM_REQUIRED(VERSION 3.11.0)

FIND_PACKAGE(PythonExtensions REQUIRED)

# Enable CTest testing ('make test' target for makefile generator).
ENABLE_TESTING()

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CGAL_HEADER_ONLY ON)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCGAL_EIGEN3_ENABLED -DCGAL_HEADER_ONLY")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -g")
SET(CMAKE_VERBOSE_MAKEFILE ON)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs ${PYTHON_VERSION_STRING})
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})

SET(
  PYTHON_SITE_PACKAGES_INSTALL_DIR
  ${CMAKE_INSTALL_PREFIX}/lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages
)
SET(
  PCSR_PYTHON_SITE_PACKAGES_INSTALL_DIR
  ${PYTHON_SITE_PACKAGES_INSTALL_DIR}/pcsr
)

FIND_PACKAGE(NumPy)
INCLUDE_DIRECTORIES(${NUMPY_INCLUDE_DIRS})

SET(BOOST_COMPONENTS system serialization)
SET(PCSR_BP_PYTHON python3)
SET(PCSR_BP_NUMPY numpy3)
IF (PYTHONLIBS_VERSION_STRING VERSION_LESS 3.0)
  SET(PCSR_BP_PYTHON python)
  SET(PCSR_BP_NUMPY numpy)
ENDIF()
SET(PCSR_BP_COMPONENT ${PCSR_BP_PYTHON} ${PCSR_BP_NUMPY})
SET(BOOST_MIN_VERSION 1.53)
MESSAGE(STATUS "Finding BOOST with components=${BOOST_COMPONENTS} ${PCSR_BP_COMPONENT}...")
FIND_PACKAGE(Boost ${BOOST_MIN_VERSION} COMPONENTS ${BOOST_COMPONENTS} OPTIONAL_COMPONENTS ${PCSR_BP_COMPONENT})
IF (NOT Boost_PYTHON_LIBRARY AND NOT Boost_PYTHON3_LIBRARY )
  # Extra search on multi-python-target Gentoo systems for boost python/numpy libs
  FIND_LIBRARY(
    BP_PYLIB
    boost_${PCSR_BP_PYTHON}-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
    NAMES
    boost_${PCSR_BP_PYTHON}-${PYTHON_VERSION_MAJOR}_${PYTHON_VERSION_MINOR}
    boost_python-${PYTHON_VERSION_MAJOR}_${PYTHON_VERSION_MINOR}
    boost_python-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
    boost_python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}
    boost_python
  )
  FIND_LIBRARY(
    BP_NPLIB
    boost_${PCSR_BP_NUMPY}-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
    NAMES
    boost_${PCSR_BP_NUMPY}-${PYTHON_VERSION_MAJOR}_${PYTHON_VERSION_MINOR}
    boost_numpy-${PYTHON_VERSION_MAJOR}_${PYTHON_VERSION_MINOR}
    boost_numpy-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
    boost_numpy${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}
    boost_numpy
  )
  SET(PCSR_BOOST_PYTHON_LIBRARIES ${BP_PYLIB})
  IF ( BP_NPLIB )
    SET(PCSR_BOOST_PYTHON_LIBRARIES ${BP_NPLIB} ${PCSR_BOOST_PYTHON_LIBRARIES})
  ENDIF()
ELSE()
  IF (PYTHONLIBS_VERSION_STRING VERSION_LESS 3.0)
    SET(PCSR_BOOST_PYTHON_LIBRARIES ${Boost_PYTHON_LIBRARY} ${Boost_NUMPY_LIBRARY})
  ELSE()
    SET(PCSR_BOOST_PYTHON_LIBRARIES ${Boost_PYTHON3_LIBRARY} ${Boost_NUMPY3_LIBRARY})
  ENDIF()
ENDIF()

IF (WITH_TBB)
  FIND_PACKAGE(TBB)
  IF ( TBB_FOUND )
    INCLUDE_DIRECTORIES(${TBB_INCLUDE_DIR})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCGAL_LINKED_WITH_TBB")
  ENDIF()
ENDIF()

FIND_PACKAGE(Eigen3 3.1.0)
FIND_PACKAGE(GMP)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

SET(CGAL_COMPONENTS "")
MESSAGE(STATUS "Finding CGAL with components=${CGAL_COMPONENTS}...")
#FIND_PACKAGE(CGAL COMPONENTS ${CGAL_COMPONENTS})
FIND_PACKAGE(CGAL)

SET(PCL_COMPONENTS common kdtree octree io geometry surface)
MESSAGE(STATUS "Finding PCL with components=${PCL_COMPONENTS}...")
FIND_PACKAGE(PCL 1.7 QUIET COMPONENTS ${PCL_COMPONENTS})
SET(
  PCSR_PCL_LIBRARIES
  ${PCL_IO_LIBRARY}
  ${PCL_COMMON_LIBRARY}
  ${PCL_OCTREE_LIBRARY}
  ${PCL_SURFACE_LIBRARY}
)
ADD_SUBDIRECTORY(src)

INSTALL(
  DIRECTORY pcsr
  DESTINATION ${PYTHON_SITE_PACKAGES_INSTALL_DIR}
)

