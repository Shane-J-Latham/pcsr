# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Test

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    - uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libeigen3-dev libboost-all-dev libcgal-dev
        version: 1.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install cython scikit-build wheel 'versioneer[toml]' flake8 ruff pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -m pip install --user --no-deps --no-build-isolation 'git+https://github.com/AppliedMathematicsANU/pyemblite.git#egg=pyemblite'
        CPATH=/usr/include/eigen3 python -m pip install --user --no-deps --no-build-isolation .
    - name: Lint with ruff and flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        ruff check ./pcsr
        flake8 ./pcsr --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ./pcsr --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      shell: bash
      run: |
        cd ~
        pytest $(python -c 'import os; import pcsr; print(os.path.dirname(pcsr.__file__))')

